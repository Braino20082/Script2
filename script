-- Steal Brainrot & Fly to Base (ServerScriptService)
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Einstellungen
local FLY_DURATION = 1.5       -- Sekunden Flug
local FLY_HEIGHT_OFFSET = 6    -- Höhe über Base
local DISABLE_COLLISION = true -- Kollision während Flug aus
local MIN_HEALTH = 1           -- Mindestleben
local DEBOUNCE_TIME = 1.5      -- Zeit bis erneuter Flug möglich

local playerDebounce = {}

-- Nächstes Base-Part finden
local function findNearestBase(position)
    local basesFolder = Workspace:FindFirstChild("Bases")
    if not basesFolder then return nil end
    local nearest
    local nearestDist = math.huge
    for _, obj in ipairs(basesFolder:GetChildren()) do
        if obj:IsA("BasePart") then
            local d = (obj.Position - position).Magnitude
            if d < nearestDist then
                nearest = obj
                nearestDist = d
            end
        end
    end
    return nearest
end

-- Smooth serverseitiger Flug
local function flyPlayerToBase(player, sourcePosition)
    if not player.Character then return end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end
    if humanoid.Health < MIN_HEALTH then return end
    if playerDebounce[player.UserId] then return end
    playerDebounce[player.UserId] = true

    local base = findNearestBase(sourcePosition or hrp.Position)
    if not base then
        playerDebounce[player.UserId] = nil
        return
    end

    local startCFrame = hrp.CFrame
    local targetCFrame = base.CFrame + Vector3.new(0, FLY_HEIGHT_OFFSET, 0)

    local oldPlatform = humanoid.PlatformStand
    humanoid.PlatformStand = true

    local oldCanCollide = {}
    if DISABLE_COLLISION then
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                oldCanCollide[part] = part.CanCollide
                part.CanCollide = false
            end
        end
    end

    local elapsed = 0
    while elapsed < FLY_DURATION do
        local dt = RunService.Heartbeat:Wait()
        elapsed = math.min(FLY_DURATION, elapsed + dt)
        local alpha = elapsed / FLY_DURATION
        hrp.CFrame = startCFrame:Lerp(targetCFrame, alpha)
    end

    hrp.CFrame = targetCFrame
    humanoid.PlatformStand = oldPlatform
    if DISABLE_COLLISION then
        for part, val in pairs(oldCanCollide) do
            if part and part.Parent then
                part.CanCollide = val
            end
        end
    end

    -- Debounce zurücksetzen
    delay(DEBOUNCE_TIME, function()
        playerDebounce[player.UserId] = nil
    end)
end

-- Wenn Spieler Brainrot berührt
local function setupBrainrot(brainrot)
    if not brainrot:IsA("BasePart") then return end
    brainrot.Touched:Connect(function(hit)
        local char = hit.Parent
        if char and char:FindFirstChild("Humanoid") then
            local player = Players:GetPlayerFromCharacter(char)
            if player then
                flyPlayerToBase(player, brainrot.Position)
            end
        end
    end)
end

-- Alle existierenden Brainrot-Parts überwachen
for _, obj in ipairs(Workspace:GetDescendants()) do
    if obj.Name == "Brainrot" then
        setupBrainrot(obj)
    end
end

-- Neue Brainrot-Parts automatisch überwachen
Workspace.DescendantAdded:Connect(function(obj)
    if obj.Name == "Brainrot" then
        setupBrainrot(obj)
    end
end)
