-- ServerScriptService/GiveAssetsServer.lua
-- Server-seitiges Script: gibt Tools/Accessories serverseitig an Spieler, wenn erlaubt.
-- Leg in ReplicatedStorage die Assets (Tools/Accessories) mit den in ASSET_MAP angegebenen Namen ab.

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MarketplaceService = game:GetService("MarketplaceService")

-- RemoteEvent-Name (wird in ReplicatedStorage gesucht/erstellt)
local REMOTE_NAME = "RequestServerGive"

-- Whitelist: Server-Admins / Entwickler (UserIds die automatisch freigeschaltet werden)
local DEV_WHITELIST = {
    -- Beispiel: [12345678] = true,
}

-- Mapping: "SpielPass-Name" -> GamePassId und AssetName im ReplicatedStorage
-- Passe die Asset-Namen an die tatsächlichen Objekte im ReplicatedStorage an
local PASS_MAP = {
    ["VIP"] = {
        PassId = 1229510262, -- Beispiel / ersetze falls nötig
        AssetName = "VIPTool" -- Name eines Tools/Accessories in ReplicatedStorage
    },
    ["2x Geld"] = {
        PassId = 1228591447, -- falls kein echt pass ID, setze 0
        AssetName = "DoubleMoneyTool"
    },
    ["Admin-Befehle"] = {
        PassId = 1227013099, -- ersetze ggf die korrekte Admin Pass ID
        AssetName = "AdminTool"
    }
}

-- Optional: Name für generelle "GiveAllTools" Aktion:
local GIVE_ALL_TOOLS = true -- erlaubt Client, alle Tools anzufordern

-- Ensure RemoteEvent exists in ReplicatedStorage
local remote = ReplicatedStorage:FindFirstChild(REMOTE_NAME)
if not remote then
    remote = Instance.new("RemoteEvent")
    remote.Name = REMOTE_NAME
    remote.Parent = ReplicatedStorage
end

-- Hilfsfunktion: prüft ob Spieler den Pass hat oder in Whitelist ist
local function playerAllowedForPass(player, passId)
    if DEV_WHITELIST[player.UserId] then
        return true
    end
    if passId and passId > 0 then
        local ok, owns = pcall(function()
            return MarketplaceService:UserOwnsGamePassAsync(player.UserId, passId)
        end)
        if ok and owns then
            return true
        end
    end
    return false
end

-- Hilfsfunktion: gebe ein Asset (Tool/Accessory) an Spieler (serverseitig)
local function giveAssetToPlayer(player, assetName)
    if not assetName then return false, "No assetName" end
    local asset = ReplicatedStorage:FindFirstChild(assetName)
    if not asset then
        return false, "Asset not found: "..assetName
    end

    local cloned = asset:Clone()
    -- Wenn Tool -> in Backpack, Accessory -> an Character parenten
    if cloned:IsA("Tool") then
        cloned.Parent = player:FindFirstChild("Backpack") or player
        return true, "Tool given: "..cloned.Name
    elseif cloned:IsA("Accessory") then
        -- Character muss vorhanden sein
        local char = player.Character
        if char then
            cloned.Parent = char
            return true, "Accessory parented to Character: "..cloned.Name
        else
            cloned.Parent = player -- fallback
            return true, "Accessory given to player (no char): "..cloned.Name
        end
    else
        -- Fallback: parent to Backpack or Character
        local char = player.Character
        if char then
            cloned.Parent = char
        else
            cloned.Parent = player:FindFirstChild("Backpack") or player
        end
        return true, "Generic asset given: "..cloned.Name
    end
end

-- Handle remote requests from clients
remote.OnServerEvent:Connect(function(player, action, payload)
    -- action: string indicating request type
    if action == "RequestPassAsset" and type(payload) == "string" then
        local passEntry = PASS_MAP[payload]
        if not passEntry then
            remote:FireClient(player, "Response", false, "Unknown pass "..tostring(payload))
            return
        end
        local allowed = playerAllowedForPass(player, passEntry.PassId)
        if allowed then
            local ok, msg = pcall(function()
                return giveAssetToPlayer(player, passEntry.AssetName)
            end)
            if ok then
                remote:FireClient(player, "Response", true, "Given asset for "..payload)
            else
                remote:FireClient(player, "Response", false, "Server error giving asset: "..tostring(msg))
            end
        else
            remote:FireClient(player, "Response", false, "Not owner of pass or not whitelisted")
        end

    elseif action == "RequestGiveAllTools" and GIVE_ALL_TOOLS then
        -- gebe alle Tools aus ReplicatedStorage (serverseitig)
        local count = 0
        for _, item in pairs(ReplicatedStorage:GetChildren()) do
            if item:IsA("Tool") then
                local ok, msg = pcall(function()
                    local clone = item:Clone()
                    clone.Parent = player:FindFirstChild("Backpack") or player
                end)
                if ok then count = count + 1 end
            end
        end
        remote:FireClient(player, "Response", true, "Gave "..tostring(count).." tools.")
    else
        remote:FireClient(player, "Response", false, "Unknown action or not allowed")
    end
end)

print("[GiveAssetsServer] Ready, Remote:", remote:GetFullName())
