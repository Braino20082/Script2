-- ServerScriptService/UniversalToolSystem.lua
-- Ein einziges Script, das Remotes erstellt, Tool-Requests handhabt
-- und bei jedem Spieler ein LocalScript (GUI + Client-Logik) in dessen PlayerGui legt.
-- VORAUSSETZUNG: Tools liegen in ServerStorage/Tools als Tool-Instanzen.

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local Players = game:GetService("Players")

-- Sicherstellen, dass Tools-Ordner existiert
local toolsFolder = ServerStorage:FindFirstChild("Tools")
if not toolsFolder then
    toolsFolder = Instance.new("Folder")
    toolsFolder.Name = "Tools"
    toolsFolder.Parent = ServerStorage
    warn("[UniversalToolSystem] ServerStorage/Tools wurde erstellt. Lege dort deine Tool-Instanzen ab.")
end

-- RemoteEvents anlegen (wenn noch nicht vorhanden)
local function getOrCreateRemote(name)
    local obj = ReplicatedStorage:FindFirstChild(name)
    if not obj then
        obj = Instance.new("RemoteEvent")
        obj.Name = name
        obj.Parent = ReplicatedStorage
    end
    return obj
end

local ToolRequest = getOrCreateRemote("ToolRequest")    -- Client -> Server (params table)
local AvailableTools = getOrCreateRemote("AvailableTools") -- Server -> Client (liste)

-- Hilfsfunktion: Liste von Tool-Namen
local function getToolNames()
    local names = {}
    for _, c in ipairs(toolsFolder:GetChildren()) do
        if c:IsA("Tool") then
            table.insert(names, c.Name)
        end
    end
    return names
end

-- Server-Funktion: gebe ein Tool an einen Spieler (sicheres Clone in Backpack)
local function giveToolToPlayer(toolName, player)
    if type(toolName) ~= "string" or not player or not player.Parent then return false end
    local tool = toolsFolder:FindFirstChild(toolName)
    if not tool or not tool:IsA("Tool") then return false end

    local backpack = player:FindFirstChildWhichIsA("Backpack")
    if not backpack then return false end

    -- Entferne evtl. vorhandene Kopie
    local existing = backpack:FindFirstChild(toolName) or (player.Character and player.Character:FindFirstChild(toolName))
    if existing then existing:Destroy() end

    local clone = tool:Clone()
    clone.Parent = backpack
    return true
end

-- Request-Handler (vom Client)
ToolRequest.OnServerEvent:Connect(function(player, params)
    -- Erwarte params als table: { action = "single"/"all", toolName = optional string }
    if type(params) ~= "table" then return end
    if params.action == "single" and type(params.toolName) == "string" then
        giveToolToPlayer(params.toolName, player)
    elseif params.action == "all" then
        for _, name in ipairs(getToolNames()) do
            giveToolToPlayer(name, player)
        end
    end
end)

-- Broadcast-Funktion: sendet aktuelle Tool-Liste an alle Spieler
local function broadcastToolList()
    local names = getToolNames()
    for _, pl in ipairs(Players:GetPlayers()) do
        AvailableTools:FireClient(pl, names)
    end
end

-- Wenn sich Inhalt von ServerStorage/Tools ändert -> Broadcast
toolsFolder.ChildAdded:Connect(broadcastToolList)
toolsFolder.ChildRemoved:Connect(broadcastToolList)
toolsFolder.Changed:Connect(broadcastToolList)

-- LocalScript-Source (wird pro Spieler in dessen PlayerGui erzeugt)
local localScriptSource = [[
-- Client-LocalScript (dynamisch vom Server in PlayerGui gesetzt)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local ToolRequest = ReplicatedStorage:WaitForChild("ToolRequest")
local AvailableTools = ReplicatedStorage:WaitForChild("AvailableTools")

-- Einfaches GUI erstellen
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "UniversalToolsGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Name = "Frame_Main"
frame.Size = UDim2.new(0, 300, 0, 220)
frame.Position = UDim2.new(0, 10, 0, 60)
frame.BackgroundTransparency = 0.15
frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextColor3 = Color3.new(1,1,1)
title.Text = "Tools"
title.Parent = frame

local list = Instance.new("ScrollingFrame")
list.Name = "ToolsList"
list.Size = UDim2.new(1, -10, 1, -90)
list.Position = UDim2.new(0, 5, 0, 35)
list.CanvasSize = UDim2.new(0, 0, 0, 0)
list.Parent = frame
list.BackgroundTransparency = 0.8
list.BorderSizePixel = 0
list.ScrollBarThickness = 6

local uiList = Instance.new("UIListLayout")
uiList.Parent = list
uiList.SortOrder = Enum.SortOrder.LayoutOrder
uiList.Padding = UDim.new(0, 6)

local getAllBtn = Instance.new("TextButton")
getAllBtn.Size = UDim2.new(1, -10, 0, 30)
getAllBtn.Position = UDim2.new(0, 5, 1, -45)
getAllBtn.Text = "Alle Tools holen"
getAllBtn.Font = Enum.Font.SourceSansBold
getAllBtn.TextSize = 18
getAllBtn.Parent = frame

getAllBtn.MouseButton1Click:Connect(function()
    ToolRequest:FireServer({ action = "all" })
end)

-- baut Buttons basierend auf Namen-Liste
local function refreshToolList(toolNames)
    for _, child in ipairs(list:GetChildren()) do
        if not child:IsA("UIListLayout") then
            child:Destroy()
        end
    end

    for i, name in ipairs(toolNames) do
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, -10, 0, 30)
        btn.Name = "Btn_" .. name
        btn.LayoutOrder = i
        btn.Text = "Hole: " .. name
        btn.Font = Enum.Font.SourceSans
        btn.TextSize = 16
        btn.Parent = list

        btn.MouseButton1Click:Connect(function()
            ToolRequest:FireServer({ action = "single", toolName = name })
        end)
    end

    -- Update CanvasSize (wartet ein Tick damit AbsoluteSize stimmt)
    wait()
    local total = 0
    for _, child in ipairs(list:GetChildren()) do
        if child:IsA("GuiObject") and child.AbsoluteSize.Y then
            total = total + child.AbsoluteSize.Y + (uiList.Padding and uiList.Padding.Offset or 0)
        end
    end
    list.CanvasSize = UDim2.new(0, 0, 0, total)
end

-- Wenn Server Update sendet
AvailableTools.OnClientEvent:Connect(function(toolNames)
    if type(toolNames) ~= "table" then toolNames = {} end
    refreshToolList(toolNames)
end)

-- Anfrage initial (alternativ: Server sent initial Liste beim Join — aber forciere nochmal eine Anfrage falls nötig)
-- Wir benutzen kein Request-Remote für Liste; der Server sollte initial senden.
]]

-- PlayerAdded: sende Liste und setzte LocalScript in PlayerGui
Players.PlayerAdded:Connect(function(player)
    -- Fire initial tool list direkt an neuen Spieler
    local names = getToolNames()
    AvailableTools:FireClient(player, names)

    -- Erstelle LocalScript in PlayerGui (damit Client-GUI läuft). Source aus localScriptSource.
    -- Falls der Spieler bereits eine GUI mit gleichem Namen hat, entferne sie zuerst (Refresh).
    local function deployLocalScriptToPlayer(pl)
        -- Warte auf PlayerGui
        local pg = pl:WaitForChild("PlayerGui", 5)
        if not pg then return end

        -- Entferne altes falls vorhanden
        local existing = pg:FindFirstChild("UniversalToolsGui")
        if existing then existing:Destroy() end

        -- LocalScript erzeugen
        local ls = Instance.new("LocalScript")
        ls.Name = "UniversalToolsClient"
        ls.Source = localScriptSource
        ls.Parent = pg
        -- Hinweis: LocalScript wird auf dem Client ausgeführt sobald es in PlayerGui gepackt wird.
    end

    deployLocalScriptToPlayer(player)
end)

-- Falls Spieler bereits drin sind (Script hot-reloaded), deploy initial
for _, pl in ipairs(Players:GetPlayers()) do
    -- sende Liste direkt
    AvailableTools:FireClient(pl, getToolNames())
    -- deploy LocalScript falls noch nicht
    if not pl:FindFirstChild("PlayerGui") then
        pl.CharacterAdded:Wait()
    end
    local pg = pl:FindFirstChild("PlayerGui")
    if pg and not pg:FindFirstChild("UniversalToolsGui") then
        local ls = Instance.new("LocalScript")
        ls.Name = "UniversalToolsClient"
        ls.Source = localScriptSource
        ls.Parent = pg
    end
end

-- Ready
print("[UniversalToolSystem] läuft. Tools in ServerStorage/Tools werden an Spieler verteilt.")
]]

-- Script Ende
